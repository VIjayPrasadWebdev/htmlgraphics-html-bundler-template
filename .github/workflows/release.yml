name: Release

on:
  push:
    tags:
      - "v*.*.*" # Run workflow on version tags, e.g. v1.0.0.

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2
        with:
          node-version: "14.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Get plugin metadata
        id: metadata
        run: |
          sudo apt-get install jq

          export NAME=$(cat package.json | jq -r .name)
          export VERSION=$(cat package.json | jq -r .version)
          export ZIP_NAME=${NAME}-${VERSION}.zip

          echo "::set-output name=name::${NAME}"
          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=plugin-type::${GRAFANA_PLUGIN_TYPE}"
          echo "::set-output name=zip-name::${ZIP_NAME}"
          echo "::set-output name=github-tag::${GITHUB_REF#refs/*/}"

      - name: Read changelog
        id: changelog
        run: |
          awk '/^## / {s++} s == 1 {print}' CHANGELOG.md > release_notes.md
          echo "::set-output name=path::release_notes.md"

      - name: Check package version
        run: if [ "v${{ steps.metadata.outputs.version }}" != "${{ steps.metadata.outputs.github-tag }}" ]; then printf "\033[0;31mPackage version doesn't match tag name\033[0m\n"; exit 1; fi

      - name: Package plugin
        id: package-plugin
        run: |
          mv dist ${{ steps.metadata.outputs.name }}
          zip ${{ steps.metadata.outputs.zip-name }} ${{ steps.metadata.outputs.name }} -r

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: ${{ steps.changelog.outputs.path }}
          draft: true

      - name: Add plugin to release
        id: upload-plugin-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.metadata.outputs.zip-name }}
          asset_name: ${{ steps.metadata.outputs.zip-name }}
          asset_content_type: application/zip

      - name: Publish release
        run: |
          echo A draft release has been created. Please review and publish it.
